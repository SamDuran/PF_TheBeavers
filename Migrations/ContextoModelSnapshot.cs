// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace PF_THEBEAVERS.Migrations
{
    [DbContext(typeof(Contexto))]
    partial class ContextoModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.7");

            modelBuilder.Entity("Models.Averias", b =>
                {
                    b.Property<int>("AveriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClienteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("TecnicoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TipoAveriaId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AveriaId");

                    b.ToTable("Averias");
                });

            modelBuilder.Entity("Models.Clientes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Clientes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Apellido = "",
                            Cedula = "",
                            Nombre = "Cliente No Registrado"
                        });
                });

            modelBuilder.Entity("Models.Contratos", b =>
                {
                    b.Property<int?>("ContratoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApellidoCliente")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Celular")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Comentario")
                        .HasColumnType("TEXT");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Estado")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Existente")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("TEXT");

                    b.Property<string>("NoContrato")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NombreCliente")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Plan")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PlanId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TelefonoReferencial")
                        .HasColumnType("TEXT");

                    b.Property<int>("UltimoPagoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ContratoId");

                    b.ToTable("Contratos");
                });

            modelBuilder.Entity("Models.Pagos", b =>
                {
                    b.Property<int?>("PagoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApellidoCliente")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Asunto")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CedulaCliente")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Existente")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaPago")
                        .HasColumnType("TEXT");

                    b.Property<float?>("MontoPago")
                        .HasColumnType("REAL");

                    b.Property<string>("NoContrato")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NombreCliente")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TipoPago")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TipoPagoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PagoId");

                    b.ToTable("Pagos");
                });

            modelBuilder.Entity("Models.Planes", b =>
                {
                    b.Property<int?>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Estado")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float?>("Precio")
                        .HasColumnType("REAL");

                    b.Property<string>("TipoPlan")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TipoPlanId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlanId");

                    b.ToTable("Planes");

                    b.HasData(
                        new
                        {
                            PlanId = 1,
                            Descripcion = "3 Mbps/1 Mbps + 150 canales",
                            Estado = true,
                            FechaCreacion = new DateTime(2022, 8, 4, 20, 17, 24, 728, DateTimeKind.Local).AddTicks(3052),
                            FechaModificacion = new DateTime(2022, 8, 4, 20, 17, 24, 728, DateTimeKind.Local).AddTicks(3054),
                            Nombre = "Combo Básico",
                            Precio = 1000f,
                            TipoPlan = "Plan Básico",
                            TipoPlanId = 1
                        },
                        new
                        {
                            PlanId = 2,
                            Descripcion = "10 Mbps/3 Mbps + 175 canales",
                            Estado = true,
                            FechaCreacion = new DateTime(2022, 8, 4, 20, 17, 24, 728, DateTimeKind.Local).AddTicks(3126),
                            FechaModificacion = new DateTime(2022, 8, 4, 20, 17, 24, 728, DateTimeKind.Local).AddTicks(3128),
                            Nombre = "Combo Medio",
                            Precio = 1700f,
                            TipoPlan = "Plan Medio",
                            TipoPlanId = 2
                        },
                        new
                        {
                            PlanId = 3,
                            Descripcion = "50 Mbps/10 Mbps + 275 canales",
                            Estado = true,
                            FechaCreacion = new DateTime(2022, 8, 4, 20, 17, 24, 728, DateTimeKind.Local).AddTicks(3185),
                            FechaModificacion = new DateTime(2022, 8, 4, 20, 17, 24, 728, DateTimeKind.Local).AddTicks(3187),
                            Nombre = "Combo Premium",
                            Precio = 2850f,
                            TipoPlan = "Plan Premium",
                            TipoPlanId = 3
                        },
                        new
                        {
                            PlanId = 4,
                            Descripcion = "25 Mbps/5 Mbps + 225 canales",
                            Estado = true,
                            FechaCreacion = new DateTime(2022, 8, 4, 20, 17, 24, 728, DateTimeKind.Local).AddTicks(3244),
                            FechaModificacion = new DateTime(2022, 8, 4, 20, 17, 24, 728, DateTimeKind.Local).AddTicks(3246),
                            Nombre = "Combo Deluxe",
                            Precio = 2500f,
                            TipoPlan = "Plan Premium",
                            TipoPlanId = 3
                        });
                });

            modelBuilder.Entity("Models.Tecnicos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("TEXT");

                    b.Property<string>("NoCarnet")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TipoTecnico")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TipoTecnicoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Zona")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ZonaId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Tecnicos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FechaCreacion = new DateTime(2022, 8, 4, 20, 17, 24, 728, DateTimeKind.Local).AddTicks(2424),
                            FechaModificacion = new DateTime(2022, 8, 4, 20, 17, 24, 728, DateTimeKind.Local).AddTicks(2427),
                            NoCarnet = "1234567891",
                            Nombre = "Tecnico1",
                            Telefono = "",
                            TipoTecnico = "",
                            TipoTecnicoId = 0,
                            Zona = "",
                            ZonaId = 0
                        },
                        new
                        {
                            Id = 2,
                            FechaCreacion = new DateTime(2022, 8, 4, 20, 17, 24, 728, DateTimeKind.Local).AddTicks(2492),
                            FechaModificacion = new DateTime(2022, 8, 4, 20, 17, 24, 728, DateTimeKind.Local).AddTicks(2494),
                            NoCarnet = "1234567892",
                            Nombre = "Tecnico2",
                            Telefono = "",
                            TipoTecnico = "",
                            TipoTecnicoId = 0,
                            Zona = "",
                            ZonaId = 0
                        },
                        new
                        {
                            Id = 3,
                            FechaCreacion = new DateTime(2022, 8, 4, 20, 17, 24, 728, DateTimeKind.Local).AddTicks(2543),
                            FechaModificacion = new DateTime(2022, 8, 4, 20, 17, 24, 728, DateTimeKind.Local).AddTicks(2546),
                            NoCarnet = "1234567893",
                            Nombre = "Tecnico3",
                            Telefono = "",
                            TipoTecnico = "",
                            TipoTecnicoId = 0,
                            Zona = "",
                            ZonaId = 0
                        },
                        new
                        {
                            Id = 4,
                            FechaCreacion = new DateTime(2022, 8, 4, 20, 17, 24, 728, DateTimeKind.Local).AddTicks(2597),
                            FechaModificacion = new DateTime(2022, 8, 4, 20, 17, 24, 728, DateTimeKind.Local).AddTicks(2599),
                            NoCarnet = "1234567894",
                            Nombre = "Tecnico4",
                            Telefono = "",
                            TipoTecnico = "",
                            TipoTecnicoId = 0,
                            Zona = "",
                            ZonaId = 0
                        },
                        new
                        {
                            Id = 5,
                            FechaCreacion = new DateTime(2022, 8, 4, 20, 17, 24, 728, DateTimeKind.Local).AddTicks(2647),
                            FechaModificacion = new DateTime(2022, 8, 4, 20, 17, 24, 728, DateTimeKind.Local).AddTicks(2650),
                            NoCarnet = "1234567895",
                            Nombre = "Tecnico5",
                            Telefono = "",
                            TipoTecnico = "",
                            TipoTecnicoId = 0,
                            Zona = "",
                            ZonaId = 0
                        });
                });

            modelBuilder.Entity("Models.TipoAverias", b =>
                {
                    b.Property<int>("TipoAveriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("NombreAveria")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TipoAveriaId");

                    b.ToTable("TipoAverias");

                    b.HasData(
                        new
                        {
                            TipoAveriaId = 1,
                            NombreAveria = "Fibra Rota"
                        },
                        new
                        {
                            TipoAveriaId = 2,
                            NombreAveria = "No Señal"
                        },
                        new
                        {
                            TipoAveriaId = 3,
                            NombreAveria = "Averia General"
                        });
                });

            modelBuilder.Entity("Models.TipoPagos", b =>
                {
                    b.Property<int>("TipoPagoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("NombrePago")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TipoPagoId");

                    b.ToTable("TipoPagos");

                    b.HasData(
                        new
                        {
                            TipoPagoId = 1,
                            NombrePago = "Efectivo"
                        },
                        new
                        {
                            TipoPagoId = 2,
                            NombrePago = "Tarjeta"
                        },
                        new
                        {
                            TipoPagoId = 3,
                            NombrePago = "Cheque"
                        });
                });

            modelBuilder.Entity("Models.TipoPlanes", b =>
                {
                    b.Property<int>("TipoPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("NombrePlan")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TipoPlanId");

                    b.ToTable("TipoPlanes");

                    b.HasData(
                        new
                        {
                            TipoPlanId = 1,
                            NombrePlan = "Plan Básico"
                        },
                        new
                        {
                            TipoPlanId = 2,
                            NombrePlan = "Plan Medio"
                        },
                        new
                        {
                            TipoPlanId = 3,
                            NombrePlan = "Plan Premium"
                        });
                });

            modelBuilder.Entity("Models.TipoUsuarios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TipoUsuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Tipo = "Administrador"
                        },
                        new
                        {
                            Id = 2,
                            Tipo = "Empleado común"
                        },
                        new
                        {
                            Id = 3,
                            Tipo = "Empleado Call Center"
                        });
                });

            modelBuilder.Entity("Models.Usuarios", b =>
                {
                    b.Property<int>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Existente")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<int>("TipoUsuarioId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UsuarioId");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            UsuarioId = 1,
                            Existente = true,
                            FechaCreacion = new DateTime(2022, 8, 4, 20, 17, 24, 728, DateTimeKind.Local).AddTicks(1599),
                            FechaModificacion = new DateTime(2022, 8, 4, 20, 17, 24, 728, DateTimeKind.Local).AddTicks(1622),
                            Nombres = "Luis Rafael Baltodano",
                            Password = "20200070",
                            TipoUsuarioId = 1,
                            UserName = "RafaelB"
                        },
                        new
                        {
                            UsuarioId = 2,
                            Existente = true,
                            FechaCreacion = new DateTime(2022, 8, 4, 20, 17, 24, 728, DateTimeKind.Local).AddTicks(1703),
                            FechaModificacion = new DateTime(2022, 8, 4, 20, 17, 24, 728, DateTimeKind.Local).AddTicks(1706),
                            Nombres = "Jeison Reyes",
                            Password = "20190564",
                            TipoUsuarioId = 1,
                            UserName = "JeisonR"
                        },
                        new
                        {
                            UsuarioId = 3,
                            Existente = true,
                            FechaCreacion = new DateTime(2022, 8, 4, 20, 17, 24, 728, DateTimeKind.Local).AddTicks(1765),
                            FechaModificacion = new DateTime(2022, 8, 4, 20, 17, 24, 728, DateTimeKind.Local).AddTicks(1767),
                            Nombres = "Samuel Duran",
                            Password = "20190793",
                            TipoUsuarioId = 1,
                            UserName = "SamuelD"
                        },
                        new
                        {
                            UsuarioId = 4,
                            Existente = true,
                            FechaCreacion = new DateTime(2022, 8, 4, 20, 17, 24, 728, DateTimeKind.Local).AddTicks(1822),
                            FechaModificacion = new DateTime(2022, 8, 4, 20, 17, 24, 728, DateTimeKind.Local).AddTicks(1825),
                            Nombres = "Elianny Rosario",
                            Password = "20190255",
                            TipoUsuarioId = 1,
                            UserName = "EliannyR"
                        },
                        new
                        {
                            UsuarioId = 5,
                            Existente = true,
                            FechaCreacion = new DateTime(2022, 8, 4, 20, 17, 24, 728, DateTimeKind.Local).AddTicks(1878),
                            FechaModificacion = new DateTime(2022, 8, 4, 20, 17, 24, 728, DateTimeKind.Local).AddTicks(1880),
                            Nombres = "Yunilda Justo",
                            Password = "20190274",
                            TipoUsuarioId = 1,
                            UserName = "YunildaJ"
                        },
                        new
                        {
                            UsuarioId = 6,
                            Existente = true,
                            FechaCreacion = new DateTime(2022, 8, 4, 20, 17, 24, 728, DateTimeKind.Local).AddTicks(2074),
                            FechaModificacion = new DateTime(2022, 8, 4, 20, 17, 24, 728, DateTimeKind.Local).AddTicks(2077),
                            Nombres = "Usuario Admin",
                            TipoUsuarioId = 1,
                            UserName = "admin"
                        },
                        new
                        {
                            UsuarioId = 7,
                            Existente = true,
                            FechaCreacion = new DateTime(2022, 8, 4, 20, 17, 24, 728, DateTimeKind.Local).AddTicks(2134),
                            FechaModificacion = new DateTime(2022, 8, 4, 20, 17, 24, 728, DateTimeKind.Local).AddTicks(2138),
                            Nombres = "Usuario comun",
                            Password = "comun",
                            TipoUsuarioId = 2,
                            UserName = "comun"
                        },
                        new
                        {
                            UsuarioId = 8,
                            Existente = true,
                            FechaCreacion = new DateTime(2022, 8, 4, 20, 17, 24, 728, DateTimeKind.Local).AddTicks(2188),
                            FechaModificacion = new DateTime(2022, 8, 4, 20, 17, 24, 728, DateTimeKind.Local).AddTicks(2190),
                            Nombres = "CallCenter",
                            Password = "call",
                            TipoUsuarioId = 3,
                            UserName = "call"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace PF_THEBEAVERS.Migrations
{
    [DbContext(typeof(Contexto))]
    [Migration("20220719204844_inicial")]
    partial class inicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.5");

            modelBuilder.Entity("Models.Averias", b =>
                {
                    b.Property<int>("AveriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClienteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("TecnicoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TipoAveriaId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AveriaId");

                    b.ToTable("Averias");
                });

            modelBuilder.Entity("Models.Clientes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Clientes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Apellido = "",
                            Cedula = "",
                            Nombre = "Cliente No Registrado"
                        });
                });

            modelBuilder.Entity("Models.Contratos", b =>
                {
                    b.Property<int?>("ContratoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApellidoCliente")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Celular")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Comentario")
                        .HasColumnType("TEXT");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Estado")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Existente")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("TEXT");

                    b.Property<string>("NoContrato")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NombreCliente")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Plan")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PlanId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TelefonoReferencial")
                        .HasColumnType("TEXT");

                    b.Property<int>("UltimoPagoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ContratoId");

                    b.ToTable("Contratos");
                });

            modelBuilder.Entity("Models.Pagos", b =>
                {
                    b.Property<int?>("PagoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApellidoCliente")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Asunto")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CedulaCliente")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Existente")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaPago")
                        .HasColumnType("TEXT");

                    b.Property<float?>("MontoPago")
                        .HasColumnType("REAL");

                    b.Property<string>("NoContrato")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NombreCliente")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TipoPago")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TipoPagoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PagoId");

                    b.ToTable("Pagos");
                });

            modelBuilder.Entity("Models.Planes", b =>
                {
                    b.Property<int?>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Estado")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float?>("Precio")
                        .HasColumnType("REAL");

                    b.Property<int>("TipoPlanId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlanId");

                    b.ToTable("Planes");

                    b.HasData(
                        new
                        {
                            PlanId = 1,
                            Descripcion = "3 Mbps/1 Mbps + 150 canales",
                            Estado = true,
                            FechaCreacion = new DateTime(2022, 7, 19, 16, 48, 43, 245, DateTimeKind.Local).AddTicks(6932),
                            FechaModificacion = new DateTime(2022, 7, 19, 16, 48, 43, 245, DateTimeKind.Local).AddTicks(6935),
                            Nombre = "Combo Básico",
                            Precio = 1000f,
                            TipoPlanId = 1
                        },
                        new
                        {
                            PlanId = 2,
                            Descripcion = "10 Mbps/3 Mbps + 175 canales",
                            Estado = true,
                            FechaCreacion = new DateTime(2022, 7, 19, 16, 48, 43, 245, DateTimeKind.Local).AddTicks(7016),
                            FechaModificacion = new DateTime(2022, 7, 19, 16, 48, 43, 245, DateTimeKind.Local).AddTicks(7019),
                            Nombre = "Combo Medio",
                            Precio = 1700f,
                            TipoPlanId = 2
                        },
                        new
                        {
                            PlanId = 3,
                            Descripcion = "50 Mbps/10 Mbps + 275 canales",
                            Estado = true,
                            FechaCreacion = new DateTime(2022, 7, 19, 16, 48, 43, 245, DateTimeKind.Local).AddTicks(7084),
                            FechaModificacion = new DateTime(2022, 7, 19, 16, 48, 43, 245, DateTimeKind.Local).AddTicks(7086),
                            Nombre = "Combo Premium",
                            Precio = 2850f,
                            TipoPlanId = 3
                        },
                        new
                        {
                            PlanId = 4,
                            Descripcion = "25 Mbps/5 Mbps + 225 canales",
                            Estado = true,
                            FechaCreacion = new DateTime(2022, 7, 19, 16, 48, 43, 245, DateTimeKind.Local).AddTicks(7151),
                            FechaModificacion = new DateTime(2022, 7, 19, 16, 48, 43, 245, DateTimeKind.Local).AddTicks(7153),
                            Nombre = "Combo Deluxe",
                            Precio = 2500f,
                            TipoPlanId = 3
                        });
                });

            modelBuilder.Entity("Models.Tecnicos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NoCarnet")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tecnicos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Apellido = "Baltodano",
                            NoCarnet = "1234567891",
                            Nombre = "Luis Rafael Baltodano"
                        },
                        new
                        {
                            Id = 2,
                            Apellido = "Reyes",
                            NoCarnet = "1234567892",
                            Nombre = "Jeison Reyes"
                        },
                        new
                        {
                            Id = 3,
                            Apellido = "Duran",
                            NoCarnet = "1234567893",
                            Nombre = "Samuel Duran"
                        },
                        new
                        {
                            Id = 4,
                            Apellido = "Rosario",
                            NoCarnet = "1234567894",
                            Nombre = "Elianny Rosario"
                        },
                        new
                        {
                            Id = 5,
                            Apellido = "Justo",
                            NoCarnet = "1234567895",
                            Nombre = "Yunilda Justo"
                        });
                });

            modelBuilder.Entity("Models.TipoAverias", b =>
                {
                    b.Property<int>("TipoAveriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("NombreAveria")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TipoAveriaId");

                    b.ToTable("TipoAverias");

                    b.HasData(
                        new
                        {
                            TipoAveriaId = 1,
                            NombreAveria = "Fibra Rota"
                        },
                        new
                        {
                            TipoAveriaId = 2,
                            NombreAveria = "No Señal"
                        },
                        new
                        {
                            TipoAveriaId = 3,
                            NombreAveria = "Averia General"
                        });
                });

            modelBuilder.Entity("Models.TipoPagos", b =>
                {
                    b.Property<int>("TipoPagoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("NombrePago")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TipoPagoId");

                    b.ToTable("TipoPagos");

                    b.HasData(
                        new
                        {
                            TipoPagoId = 1,
                            NombrePago = "Efectivo"
                        },
                        new
                        {
                            TipoPagoId = 2,
                            NombrePago = "Tarjeta"
                        },
                        new
                        {
                            TipoPagoId = 3,
                            NombrePago = "Cheque"
                        });
                });

            modelBuilder.Entity("Models.TipoPlanes", b =>
                {
                    b.Property<int>("TipoPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("NombrePlan")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TipoPlanId");

                    b.ToTable("TipoPlanes");

                    b.HasData(
                        new
                        {
                            TipoPlanId = 1,
                            NombrePlan = "Plan Básico"
                        },
                        new
                        {
                            TipoPlanId = 2,
                            NombrePlan = "Plan Medio"
                        },
                        new
                        {
                            TipoPlanId = 3,
                            NombrePlan = "Plan Premium"
                        });
                });

            modelBuilder.Entity("Models.Usuarios", b =>
                {
                    b.Property<int>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UsuarioId");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            UsuarioId = 1,
                            Nombres = "Luis Rafael Baltodano",
                            Password = "20200070",
                            UserName = "RafaelB"
                        },
                        new
                        {
                            UsuarioId = 2,
                            Nombres = "Jeison Reyes",
                            Password = "20190564",
                            UserName = "JeisonR"
                        },
                        new
                        {
                            UsuarioId = 3,
                            Nombres = "Samuel Duran",
                            Password = "20190793",
                            UserName = "SamuelD"
                        },
                        new
                        {
                            UsuarioId = 4,
                            Nombres = "Elianny Rosario",
                            Password = "20190255",
                            UserName = "EliannyR"
                        },
                        new
                        {
                            UsuarioId = 5,
                            Nombres = "Yunilda Justo",
                            Password = "20190274",
                            UserName = "YunildaJ"
                        },
                        new
                        {
                            UsuarioId = 6,
                            Nombres = "Usuario Admin",
                            UserName = "admin"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
